{
  "author": {
    "name": "Reg Braithwaite",
    "email": "raganwald@gmail.com",
    "url": "http://braythwayt.com"
  },
  "name": "allong.es",
  "description": "Combinators and Function Decorators",
  "version": "0.2.2",
  "homepage": "http://allong.es",
  "repository": {
    "type": "git",
    "url": "git://github.com/allong-es/allong-es.github.com.git"
  },
  "main": "lib/allong.es.js",
  "scripts": {
    "test": "jasmine-node --coffee --verbose spec"
  },
  "engines": {
    "node": ""
  },
  "dependencies": {},
  "devDependencies": {},
  "readme": "You really should be looking at the [allong.es home page](http://allong.es). Or the [source code](https://github.com/allong-es/allong-es.github.com/blob/master/lib/allong.es.js). But here's a cheat sheet:\n\n### variadic\n\nMakes a function into a variadic (accepts any number of arguments). The last named parameter will be given an array of arguments.\n\n```javascript\nvar fn = variadic(function (a) { return a })\n\nfn()\n  //=> []\nfn(1, 2, 3)\n  //=> [1,2,3]\n\nfn = variadic(function (a,b) { return { a: a, b: b } })\n\nfn()\n  //=> { a: undefined, b: [] }\nfn(1)\n  //=> { a: 1, b: [] }\nfn(1,2,3)\n  //=> { a: 1, b: [2, 3] }\n```\n\n### partial application\n\nThe basics. Note: applyFirst is faster than applyLeft, use it if you are only applying a single argument. Likewise, applyLast is faster than applyRight.\n\n```javascript\nvar base = function (greeting, you, me) { return greeting + ', ' + you + ', my name is ' + me }\nvar hello = applyFirst(base, 'Hello')\n\nhello('Giselle', 'Franka')\n  //=> \"Hello, Giselle, my name is Franka\"\n  \nvar helloTom = applyLeft(base, 'Hello', 'Tom')\n\nhelloTom('Harry')\n  //=> \"Hello, Tom, my name is Harry\"\n  \nvar ingrid = applyLast(base, 'Ingrid')\n\ningrid('Hi', 'Pia')\n  //=> \"Hi, Pia, my name is Ingrid\"\n  \nvar anthonyCarla = applyRight(base, 'Anthony', 'Carla')\n\nanthonyCarla('Yo')\n  //=> \"Yo, Anthony, my name is Carla\"\n```\n\nPartial application is also useful for methods:\n\n```javascript\n// sends a message\ninventories.map(send('apples')) \n  //=> [ 0, 240, 24 ]\n\n// sends a message and partially applies an argument\ninventories.forEach(send('addApples', 12))\n```\n\n### currying\n\n```javascript\ncurry( function (x, y) { return x } )\n  //=> function (x) {\n  //     return function (y) {\n  //       return x\n  //     }\n  //   }\n```\n\n### binding\n\n```javascript\nbound(fn, args...)(obj)\n  //=> fn.bind(obj, args...)\n```\n\n### properties\n```\narray.map(get('property'))\n  //=> array.map(function (element) {\n  //               return element['property']\n  //             })\n```\n\n### composition\n\n```javascript\ncompose(a, b, c)\n  //=> function (x) {\n  //     return a(b(c(x)))\n  //   }\n```\n\n```javascript\nsequence(a, b, c)\n  //=> function (x) {\n  //     return c(b(a(x)))\n  //   }\n```\n\n### mapping\n\n```javascript\nvar squareAll = splat(function (x) { return x * x })\n\nsquareAll([1, 2, 3, 4])\n  //=> [1, 4, 9, 16]\n```\n\n### decorators\n\nMaybe:\n\n```javascript\nvar safeFirst = maybe(function (arr) { return arr[0] })\n\nsafeFirst([1, 2, 3])\n  //=> 1\nsafeFirst(null)\n  //=> null\n```\n\nTap:\n\n```javascript\ntap([1, 2, 3, 4, 5], send('pop'))\n  //=> [1, 2, 3, 4]\n```\n\nFluent:\n\n```javascript\nRole = function () {}\n\nRole.prototype.set = fluent( function (property, name) { \n  this[property] = name \n})\n\nvar doomed = new Attrs()\n  .set('name', \"Fredo\")\n  .set('relationship', 'brother')\n  .set('parts', ['I', 'II'])\n```\n\nOnce:\n\n```javascript\nvar message = once( function () { console.log(\"Hello, it's me\") })\n\nmessage()\n  //=> \"Hello, it's me\"\nmessage()\n  //=>\nmessage()\n  //=>\nmessage()\n  //=>\n```",
  "readmeFilename": "readme.md",
  "_id": "allong.es@0.2.2",
  "dist": {
    "shasum": "f2c9471e1f62807ce8a82e1f843f5b27523172e8"
  },
  "_from": "allong.es@0.2.2"
}
